# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from service_protos import recorder_service_pb2 as service__protos_dot_recorder__service__pb2


class RecorderServiceStub(object):
    """RecorderService provides interface for start/stop data recording.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartRecord = channel.unary_unary(
                '/service_manager.RecorderService/StartRecord',
                request_serializer=service__protos_dot_recorder__service__pb2.CommonRequest.SerializeToString,
                response_deserializer=service__protos_dot_recorder__service__pb2.TripInfo.FromString,
                )
        self.CreateTrip = channel.unary_unary(
                '/service_manager.RecorderService/CreateTrip',
                request_serializer=service__protos_dot_recorder__service__pb2.CommonRequest.SerializeToString,
                response_deserializer=service__protos_dot_recorder__service__pb2.TripInfo.FromString,
                )
        self.GetTripInfo = channel.unary_unary(
                '/service_manager.RecorderService/GetTripInfo',
                request_serializer=service__protos_dot_recorder__service__pb2.CommonRequest.SerializeToString,
                response_deserializer=service__protos_dot_recorder__service__pb2.TripInfo.FromString,
                )
        self.StopRecord = channel.unary_unary(
                '/service_manager.RecorderService/StopRecord',
                request_serializer=service__protos_dot_recorder__service__pb2.CommonRequest.SerializeToString,
                response_deserializer=service__protos_dot_recorder__service__pb2.CommonResponse.FromString,
                )
        self.RecordStatus = channel.unary_unary(
                '/service_manager.RecorderService/RecordStatus',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=service__protos_dot_recorder__service__pb2.RecordNodeStatus.FromString,
                )


class RecorderServiceServicer(object):
    """RecorderService provides interface for start/stop data recording.
    """

    def StartRecord(self, request, context):
        """Start to record bag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTrip(self, request, context):
        """Create trip info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTripInfo(self, request, context):
        """Get the current trip info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopRecord(self, request, context):
        """Stop to record bag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecorderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.StartRecord,
                    request_deserializer=service__protos_dot_recorder__service__pb2.CommonRequest.FromString,
                    response_serializer=service__protos_dot_recorder__service__pb2.TripInfo.SerializeToString,
            ),
            'CreateTrip': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTrip,
                    request_deserializer=service__protos_dot_recorder__service__pb2.CommonRequest.FromString,
                    response_serializer=service__protos_dot_recorder__service__pb2.TripInfo.SerializeToString,
            ),
            'GetTripInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTripInfo,
                    request_deserializer=service__protos_dot_recorder__service__pb2.CommonRequest.FromString,
                    response_serializer=service__protos_dot_recorder__service__pb2.TripInfo.SerializeToString,
            ),
            'StopRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.StopRecord,
                    request_deserializer=service__protos_dot_recorder__service__pb2.CommonRequest.FromString,
                    response_serializer=service__protos_dot_recorder__service__pb2.CommonResponse.SerializeToString,
            ),
            'RecordStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordStatus,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=service__protos_dot_recorder__service__pb2.RecordNodeStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service_manager.RecorderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RecorderService(object):
    """RecorderService provides interface for start/stop data recording.
    """

    @staticmethod
    def StartRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_manager.RecorderService/StartRecord',
            service__protos_dot_recorder__service__pb2.CommonRequest.SerializeToString,
            service__protos_dot_recorder__service__pb2.TripInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTrip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_manager.RecorderService/CreateTrip',
            service__protos_dot_recorder__service__pb2.CommonRequest.SerializeToString,
            service__protos_dot_recorder__service__pb2.TripInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTripInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_manager.RecorderService/GetTripInfo',
            service__protos_dot_recorder__service__pb2.CommonRequest.SerializeToString,
            service__protos_dot_recorder__service__pb2.TripInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_manager.RecorderService/StopRecord',
            service__protos_dot_recorder__service__pb2.CommonRequest.SerializeToString,
            service__protos_dot_recorder__service__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_manager.RecorderService/RecordStatus',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            service__protos_dot_recorder__service__pb2.RecordNodeStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
